webpackJsonp([1],Array(49).concat([function(e,exports,o){var a,n;o(50),a=o(54),n=o(76),e.exports=a||{},e.exports.__esModule&&(e.exports=e.exports["default"]),n&&(("function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports).template=n)},function(e,exports,o){var a=o(51);"string"==typeof a&&(a=[[e.id,a,""]]);o(9)(a,{});a.locals&&(e.exports=a.locals)},function(e,exports,o){exports=e.exports=o(7)(),exports.i(o(52),""),exports.i(o(53),""),exports.push([e.id,"@font-face{font-family:TrumpTownPro;src:url("+o(8)+")}html{font-size:12px;min-height:100%}body{margin:0;font-family:Open Sans,Helvetica,Arial,sans-serif}a,a:hover,a:visited{text-decoration:none;color:inherit}.docs{padding-left:25%}.docs .docs_index{position:fixed;top:0;left:0;height:100%;background-color:#f3f0f0;width:25%;box-sizing:border-box;-o-box-shadow:2px 0 10px rgba(51,51,51,.5);-ms-box-shadow:2px 0 10px rgba(51,51,51,.5);box-shadow:2px 0 10px rgba(51,51,51,.5)}.docs .docs_index .logo_canvas{margin:1rem}.docs .docs_article{padding-left:5%}",""])},function(e,exports,o){exports=e.exports=o(7)(),exports.push([e.id,".markdown{font-family:Hiragino Sans GB,Microsoft YaHei,STHeiti,SimSun,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Segoe UI,AppleSDGothicNeo-Medium,Malgun Gothic,Verdana,Tahoma,sans-serif;padding:20px}.markdown a{text-decoration:none;vertical-align:baseline}.markdown a:hover{text-decoration:underline}.markdown h1{font-size:2.2em;font-weight:700;margin:1.5em 0 1em}.markdown h2{font-size:1.8em;font-weight:700;margin:1.275em 0 .85em}.markdown h3{font-size:1.6em;font-weight:700;margin:1.125em 0 .75em}.markdown h4{font-size:1.4em;font-weight:700;margin:.99em 0 .66em}.markdown h5{font-size:1.2em;font-weight:700;margin:.855em 0 .57em}.markdown h6{font-size:1em;font-weight:700;margin:.75em 0 .5em}.markdown h1+p,.markdown h1:first-child,.markdown h2+p,.markdown h2:first-child,.markdown h3+p,.markdown h3:first-child,.markdown h4+p,.markdown h4:first-child,.markdown h5+p,.markdown h5:first-child,.markdown h6+p,.markdown h6:first-child{margin-top:0}.markdown hr{border:1px solid #ccc}.markdown p{margin:1em 0;word-wrap:break-word}.markdown ol{list-style-type:decimal}.markdown li{display:list-item;line-height:1.4em}.markdown blockquote{margin:1em 20px}.markdown blockquote>:first-child{margin-top:0}.markdown blockquote>:last-child{margin-bottom:0}.markdown blockquote cite:before{content:'\\2014   \\A0'}.markdown .code{border-radius:3px;word-wrap:break-word}.markdown pre{border-radius:3px;word-wrap:break-word;border:1px solid #ccc;overflow:auto;padding:.5em}.markdown pre code{border:0;display:block}.markdown pre>code{font-family:Consolas,Inconsolata,Courier,monospace;font-weight:700;white-space:pre;margin:0}.markdown code{border-radius:3px;word-wrap:break-word;border:1px solid #ccc;padding:0 5px;margin:0 2px}.markdown img{max-width:100%}.markdown mark{color:#000;background-color:#fcf8e3}.markdown table{padding:0;border-collapse:collapse;border-spacing:0;margin-bottom:16px}.markdown table tr td,.markdown table tr th{border:1px solid #ccc;margin:0;padding:6px 13px}.markdown table tr th{font-weight:700}.markdown table tr th>:first-child{margin-top:0}.markdown table tr th>:last-child{margin-bottom:0}.markdown table tr td>:first-child{margin-top:0}.markdown table tr td>:last-child{margin-bottom:0}",""])},function(e,exports,o){exports=e.exports=o(7)(),exports.push([e.id,".github{padding:20px;font-family:Helvetica Neue,Helvetica,Hiragino Sans GB,Microsoft YaHei,STHeiti,SimSun,Segoe UI,AppleSDGothicNeo-Medium,Malgun Gothic,Arial,freesans,sans-serif;font-size:15px;background:#fff;line-height:1.6;-webkit-font-smoothing:antialiased}.github a{color:#3269a0}.github a:hover{color:#4183c4}.github h2{border-bottom:1px solid #e6e6e6;line-height:1.6}.github h6{color:#777}.github hr{border:1px solid #e6e6e6}.github pre>code{font-size:.9em;font-family:Consolas,Inconsolata,Courier,monospace}.github blockquote>code,.github h1>code,.github h2>code,.github h3>code,.github h4>code,.github h5>code,.github h6>code,.github li>code,.github p>code,.github td>code{background-color:rgba(0,0,0,.07);font-family:Consolas,Liberation Mono,Menlo,Courier,monospace;font-size:85%;padding:.2em .5em;border:0}.github blockquote{border-left:4px solid #e6e6e6;padding:0 15px;font-style:italic}.github table{background-color:#fafafa}.github table tr td,.github table tr th{border:1px solid #e6e6e6}.github table tr:nth-child(2n){background-color:#f2f2f2}",""])},function(e,exports,o){"use strict";function a(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var n=o(11),i=a(n),c=o(55),d=a(c),r=o(60),s=a(r),t=o(16),l=a(t);exports["default"]={data:function(){var e=[{anchor:"install",title:"安装",subtitles:[{name:"安装",anchor:"an-zhuang"},{name:"兼容问题",anchor:"jian-rong-wen-ti"}]},{anchor:"start",title:"起步",subtitles:[{name:"boi编译兼容",anchor:"boi-bian-yi-jian-rong"},{name:"boi脚手架",anchor:"boi-jiao-shou-jia"},{name:"编译项目文件",anchor:"bian-yi-xiang-mu-wen-jian"},{name:"dev server",anchor:"dev-server"}]},{anchor:"config",title:"配置",subtitles:[{name:"配置文件",anchor:"pei-zhi-wen-jian"},{name:"spec配置项",anchor:"spec-pei-zhi-xiang"},{name:"serve配置项",anchor:"serve-pei-zhi-xiang"},{name:"高级配置",anchor:"gao-ji-pei-zhi"}]},{anchor:"modules",title:"模块化开发",subtitles:[{name:"ES6 modules",anchor:"es6-modules"},{name:"CommonJs",anchor:"commonjs"},{name:"AMD",anchor:"amd"}]},{anchor:"plugins",title:"使用插件",subtitles:[{name:"使用boi插件",anchor:"shi-yong-boi-cha-jian"},{name:"编写boi插件",anchor:"bian-xie-boi-cha-jian"},{name:"使用webpack插件",anchor:"shi-yong-webpack-cha-jian"}]}],a={install:{content:o(65)},start:{content:o(66)},config:{content:o(73)},modules:{content:o(74)},plugins:{content:o(75)}},n={width:100,height:100};return{docs:a,index:e,size_logo_canvas:n}},created:function(){},components:{IndexHeader:i["default"],DocIndex:d["default"],DocArticle:s["default"],LogoCanvas:l["default"]}}},function(e,exports,o){var a,n;o(56),a=o(58),n=o(59),e.exports=a||{},e.exports.__esModule&&(e.exports=e.exports["default"]),n&&(("function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports).template=n)},function(e,exports,o){var a=o(57);"string"==typeof a&&(a=[[e.id,a,""]]);o(9)(a,{});a.locals&&(e.exports=a.locals)},function(e,exports,o){exports=e.exports=o(7)(),exports.push([e.id,".indexes{padding:0 2rem}.indexes .list{list-style:none;margin:0;padding:0;font-size:1.5rem}.indexes .list .item{margin-top:.5rem}.indexes .list .subtitle_list{font-size:1.2rem;text-indent:1rem;list-style:none;margin:0;padding:0}.indexes .list .subtitle_item{height:2rem;line-height:2rem}",""])},function(e,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]={props:{index:{type:Array,required:!0},active:{type:String,required:!0}},created:function(){}}},function(e,exports){e.exports=' <div class=indexes> <ul data-active={{active}} class=list> <li v-for="item in index" data-anchor={{item.anchor}} class=item> <a v-link=\'{name: "docs",params: {anchor:item.anchor}}\'>{{item.title}}</a> <template v-if=!!item.subtitles> <ul class=subtitle_list v-for="subitem in item.subtitles"> <li class=subtitle_item> <a v-link=\'{name:"docs",params:{anchor:item.anchor,subanchor:subitem.anchor}}\'>{{subitem.name}}</a> </li> </ul> </template> </li> </ul> </div> '},function(e,exports,o){var a,n;o(61),a=o(63),n=o(64),e.exports=a||{},e.exports.__esModule&&(e.exports=e.exports["default"]),n&&(("function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports).template=n)},function(e,exports,o){var a=o(62);"string"==typeof a&&(a=[[e.id,a,""]]);o(9)(a,{});a.locals&&(e.exports=a.locals)},function(e,exports,o){exports=e.exports=o(7)(),exports.push([e.id,"",""])},function(e,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]={props:{content:{type:String,required:!0}},created:function(){}}},function(e,exports){e.exports=' <div class="article github markdown" v-html=content> </div> '},function(e,exports){e.exports="<h3><a name=an-zhuang class=anchor href=#an-zhuang><span class=header-link></span></a>安装</h3><pre><code>npm install boi-cli -g\n</code></pre><p>如果有被墙问题，建议修改npm库为taobao镜像：</p> <pre><code>npm config set registry https://registry.npm.taobao.org\n</code></pre><p>或者使用<a href=https://cnpmjs.org>cnpm</a>安装。</p> <h3><a name=jian-rong-wen-ti class=anchor href=#jian-rong-wen-ti><span class=header-link></span></a>兼容问题</h3><p>在windows下安装boi自身不会有兼容问题，但是编译过程中用到的一些模块（比如node-sass）的安装过程需要底层编译，所以请确保windows具备vc++ build环境。</p>"},function(e,exports,o){e.exports='<h3><a name=boi-bian-yi-jian-rong class=anchor href=#boi-bian-yi-jian-rong><span class=header-link></span></a>boi编译兼容</h3><p>boi的编译功能基于webpack内核实现，默认的编译输出文件只兼容IE8+浏览器。如果需要兼容IE8以下浏览器，可以按照boi的配置API进行单独配置。</p> <h3><a name=boi-jiao-shou-jia class=anchor href=#boi-jiao-shou-jia><span class=header-link></span></a>boi脚手架</h3><p>boi内置三种不同类型的项目脚手架：</p> <ul> <li>normal： 常规项目。不限制技术选型，用户可根据自身需求选择任意框架和第三方库；</li> <li>vue-thirdparty：将vue作为第三方库单独引入。简单说就是vue.js不参与编译，在html文档中使用<code>script</code>标签单独引入；</li> <li>vue-inline：将vue作为一个模块使用。在项目代码中<code>require</code>、<code>import</code>或其他模块化方案加载vue，vue参与编译。</li> </ul> <blockquote> <p>boi内置的三种脚手架是从daojiaFE团队实际需求出发，所以不具有宽泛的通用性。boi提供<a href="">自定义脚手架API</a>，用户可以根据自身需求进行定制。</p> </blockquote> <h4><a name=shi-yong-jiao-shou-jia-da-jian-xiang-mu class=anchor href=#shi-yong-jiao-shou-jia-da-jian-xiang-mu><span class=header-link></span></a>使用脚手架搭建项目</h4><p>使用命令行工具运行：</p> <pre><code>boi new webapp\n</code></pre><p>或者在已存在目录下运行：</p> <pre><code>boi new .\n</code></pre><p>命令行将依次有以下提示：</p> <ul> <li><p>自定义项目名称，默认项目名称为app：</p> <p> <img src='+o(67)+' alt=""></p> </li> <li><p>选择项目类型：</p> <p> <img src='+o(68)+' alt=""></p> </li> <li><p>选择npm第三方依赖：</p> <p> <img src='+o(69)+' alt=""></p> </li> <li><p>最终确认：</p> <p> <img src='+o(70)+' alt=""></p> </li> <li><p>配置完毕后，boi会自动安装npm第三方依赖：</p> <p> <img src='+o(71)+' alt=""></p> <p> 执行成功后，生成的项目目录如下图：</p> <p> <img src='+o(72)+' alt=""></p> </li> </ul> <h4><a name=bian-yi-xiang-mu-wen-jian class=anchor href=#bian-yi-xiang-mu-wen-jian><span class=header-link></span></a>编译项目文件</h4><p>使用脚手架成功搭建项目之后，进入项目目录：</p> <pre><code>cd webapp\n</code></pre><p>在项目根目录下执行<code>build</code>命令：</p> <pre><code>// 默认dev环境编译，编译输出source map文件，并且代码不压缩\nboi build\n</code></pre><p>或者</p> <pre><code>// 生成环境编译，无source map文件，代码压缩\nboi build prod\n</code></pre><p>默认编译输出的目录<code>dest</code>。</p> <h4><a name=dev-server class=anchor href=#dev-server><span class=header-link></span></a>dev server</h4><p>boi提供dev server以方便本地开发调试，在项目根目录下执行：</p> <pre><code>boi serve\n</code></pre><p>默认监听<code>8888</code>端口。</p> <p>执行成功后，如果项目中只存在一个<code>index.*.html</code>文件，直接访问<code>localhost:8888</code>即可；如果项目中存在多个<code>index.*.html</code>文件，访问<code>localhost:8888/*.html</code>或者<code>localhost:8888/views/*.html</code>(html文件根据具体命名改动)。</p> <p>boi支持动态编译，开发过程中已存文件的修改不必重启dev server。但如果增加新文件，则必须重启dev server才可看到效果。</p>'},function(e,exports,o){e.exports=o.p+"assets/new-1.png"},function(e,exports,o){e.exports=o.p+"assets/new-2.png"},function(e,exports,o){e.exports=o.p+"assets/new-3.png"},function(e,exports,o){e.exports=o.p+"assets/new-4.png"},function(e,exports,o){e.exports=o.p+"assets/new-5.png"},function(e,exports,o){e.exports=o.p+"assets/new-6.png"},function(e,exports){e.exports="<h3><a name=pei-zhi-wen-jian class=anchor href=#pei-zhi-wen-jian><span class=header-link></span></a>配置文件</h3><p>boi的配置文件为项目根目录下的<code>boi-conf.js</code>。</p> <p>目前v1.x.x版本支持的配置项有：</p> <ul> <li><p><code>spec</code>API提供具体编译的配置项，包括以下几种：</p> <ul> <li><code>basic</code>：<code>Object</code>，基础配置；</li> <li><code>js</code>：<code>Object</code>，JS文件的编译配置项；</li> <li><code>style</code>：<code>Object</code>，style文件的编译配置项；</li> <li><code>html</code>：<code>Object</code>，html模板文件的编译配置项；</li> <li><code>image</code>：<code>Object</code>，图片文件的编译配置项。</li> </ul> </li> <li><p><code>serve</code>API提供dev server相关的配置项，包括以下几种：</p> <ul> <li><code>port</code>：<code>String</code>，修改默认监听端口；</li> <li><code>domain</code>：<code>String</code>，修改默认监听域名</li> </ul> </li> </ul> <blockquote> <p>目前版本支持的配置项较少，以满足本公司需求为主，后续版本会扩充可配置模块。</p> </blockquote> <h3><a name=spec-pei-zhi-xiang class=anchor href=#spec-pei-zhi-xiang><span class=header-link></span></a>spec配置项</h3><h4><a name=basic class=anchor href=#basic><span class=header-link></span></a>basic</h4><ul> <li><code>appName</code>：<code>String</code>，项目名称，默认值为<code>app</code>；</li> <li><code>localPath</code>: <code>Object</code>，本地目录配置<ul> <li><code>src</code>：<code>String</code>，源码文件目录，默认为<code>./src</code>；</li> <li><code>dest</code>：<code>String</code>，编译输出的本地目录，默认为<code>./dest</code>；</li> <li><code>thirdparty</code>：本地第三方库文件目录，默认为<code>./libs</code>。</li> </ul> </li> <li><code>cdn</code>：【选填】<code>Object</code>，cdn相关配置<ul> <li><code>server</code>：<code>String</code>，cdn域名；</li> <li><code>path</code>：<code>String</code>，项目在cdn服务器的路径。 -</li> </ul> </li> </ul> <p>cdn配置会在生产环境执行编译时将静态资源的url编译为cdn url，比如<code>index.html</code>中引用<code>main.app.js</code>：</p> <pre><code>&lt;script src=&#39;js/main.app.js&#39;&gt;&lt;/script&gt;\n</code></pre><p>cdn配置为：</p> <pre><code>cdn: {\n    server: &#39;static.dj.com&#39;,\n    path: &#39;/app/&#39;\n}\n</code></pre><p>执行<code>boi build prod</code>，编译成功后<code>index.html</code>中的引用地址便会被替换为：</p> <pre><code>&lt;script src=&#39;http://static.dj.com/app/js/main.app.[hash].js&#39;&gt;&lt;/script&gt;\n</code></pre><blockquote> <p><code>[hash]</code>为文件的hash指纹。</p> </blockquote> <h4><a name=js class=anchor href=#js><span class=header-link></span></a>js</h4><ul> <li><code>extType</code>：<code>String</code>，扩展名，默认值为js；</li> <li><code>srcType</code>：<code>Array</code>，源文件的转译配置，默认值为<code>[&#39;es2015&#39;]</code>；</li> <li><code>srcDir</code>：<code>String</code>，JS文件源码存放目录，相对于<code>basic.localPath.src</code>；</li> <li><code>destDir</code>：<code>String</code>，JS文件编译输出目录，相对于<code>basic.localPath.dest</code>；</li> <li><code>mainFilePrefix</code>：<code>String</code>，JS入口文件的命名前缀，默认值为<code>main</code>；</li> <li><code>uglify</code>：<code>Boolean</code>，编译输出文件是否uglify，默认<code>true</code>；</li> <li><code>useHash</code>：<code>Boolean</code>，编译输出文件是否打上hash指纹，默认<code>true</code>；</li> <li><code>mutiEntriesVendor</code>：<code>Boolean</code>，存在多入口文件时是否提取公共部分作为一个common文件，默认值为<code>false</code>。此配置项在未指定<code>vendor</code>时才会起效，如果未指定<code>vendor</code>并且存在多个入口文件，可以将公用的webpack runtime提取出来，已减少主文件体积并利用浏览器缓存提升应用性能；</li> <li><p><code>files</code>:【选填】<code>Object</code>，指定编译文件。此项如不开启则boi自动匹配遵循命名规范的入口文件。</p> <ol> <li><p><code>main</code>：<code>Object</code>，指定入口文件，如下：</p> <pre><code>files: {\n main: {\n     &#39;a&#39;: &#39;main.a.js&#39;,\n     &#39;main.b&#39;: &#39;main.b.js&#39;\n }\n}\n</code></pre></li> <li><p><code>vendor</code>：<code>Array</code>，通用模块列表，数组内的模块将被合成打包为<code>vendor.js</code>。</p> </li> </ol> </li> </ul> <h4><a name=style class=anchor href=#style><span class=header-link></span></a>style</h4><p>style配置项与JS大体相同，有以下区别：</p> <ul> <li>没有<code>uglify</code>、<code>srcType</code>、<code>mutiEntriesVendor</code>和<code>files</code>配置项；</li> <li><code>extType</code>决定css预编译器的选型。</li> </ul> <h4><a name=html class=anchor href=#html><span class=header-link></span></a>html</h4><p>html配置项与JS大体相同，有以下区别：</p> <ul> <li>html没有<code>uglify</code>、<code>srcType</code>、<code>mutiEntriesVendor</code>和<code>useHash</code>配置项；</li> <li><code>files</code>: <code>Array</code>，index文件的列表，仍需遵循命名规范；</li> <li><code>mainFilePrefix</code>：主文件前缀，默认值为<code>&#39;index&#39;</code>。</li> </ul> <h4><a name=image class=anchor href=#image><span class=header-link></span></a>image</h4><ul> <li><code>extType</code>：<code>Array</code>，图片文件扩展名列表；</li> <li><code>destDir</code>：<code>String</code>，编译输出目录，<code>basic.localPath.dest</code>；</li> <li><code>base64</code>：<code>Boolean</code>，是否对小尺寸图片进行base64编码，默认<code>false</code>；</li> <li><code>base64Limit</code>：<code>Number</code>，base64编码文件的体积上限，大于这个尺寸的文件不会被base64编码；</li> <li><p><code>cdn</code>：【选填】<code>String</code>，图片可配置独立的cdn域名，此项配置将覆盖basic同名配置项。比如style文件中引用图片：</p> <pre><code>body{\n   background-color:blue;\n   backgournd: url(&#39;../assets/images/icons.png&#39;);\n}\n</code></pre><p>image配置项为：</p> <pre><code>boi.spec(&#39;image&#39;, {\n   extType: [&#39;png&#39;, &#39;jpg&#39;],\n   destDir: &#39;image&#39;,\n   cdn: &#39;img.daojia.com&#39;,\n});\n</code></pre><p>编译输出的文件为：</p> <pre><code>body{\n   background-color:blue;\n   backgournd:url(http://img.daojia.com/icons.b709986b.png)\n}\n</code></pre></li> </ul> <h3><a name=serve-pei-zhi-xiang class=anchor href=#serve-pei-zhi-xiang><span class=header-link></span></a>serve配置项</h3><ul> <li><code>port</code>：<code>String</code>，修改默认监听端口；</li> <li><code>domain</code>：<code>String</code>，修改默认监听域名</li> </ul> <h3><a name=gao-ji-pei-zhi class=anchor href=#gao-ji-pei-zhi><span class=header-link></span></a>高级配置</h3><p>config API本质上是根据配置寻找文件并组合编译内核-webpack的配置。boi基础的config API可以满足大部分需求，对于不能满足的一些需求，作者建议使用或者编写插件解决。此外，boi config API仍然提供了高级配置项，简单讲就是让用户可以直接配置webpack。</p> <p><code>spec</code>配置项中的每个模块可以使用以下配置项：</p> <ul> <li><p><code>webpackConfig</code>：<code>Object</code>，boi支持自定义webpack的module和plugins配置项，此项配置将完全覆盖boi内置的webpack配置，请谨慎使用。</p> <ol> <li><code>preloader</code>：<code>Object</code>，对应webpack的preloader；</li> <li><code>loader</code>：<code>Object</code>，对应webpack的loader；</li> <li><code>loaders</code>: <code>Array</code>，对应webpack的loaders；</li> <li><code>postLoader</code>：<code>Object</code>，对应webpack的postloader；</li> <li><code>plugins</code>：<code>Array</code>，对应webpack的plugins。</li> </ol> </li> </ul> <p>比如：</p> <pre><code>boi.spec(&#39;js&#39;,{\n    webpackConfig: {\n        loader: {\n            test: /\\.js$/,\n            loader: &#39;babel&#39;,\n            query: {\n                presets: [&#39;es2015&#39;,&#39;react&#39;]\n            }\n        }\n    }\n});\n</code></pre>"},function(e,exports){e.exports="<p>boi支持多种前端模块化方案，包括ES6 Modules、CommonJS和AMD。</p> <blockquote> <p>CMD需要自行编写插件实现。</p> </blockquote> <h3><a name=es6-modules class=anchor href=#es6-modules><span class=header-link></span></a>ES6 Modules</h3><p>ES6 Modules是ECMAScript 6规范的一个新特性，目前浏览器兼容性非常不理想，所以需要在部署到生产环境之前必须经过转译。boi使用babel作为转译工具。</p> <p>ES6 Modules与Java、PHP等语言的模块化方案类似，模块是被同步引入的。而前端资源难免会有一些load on command（按需加载）的部分，ES6 Modules原生并不能实现动态加载的需求。需要借助第三方工具实现，比如<a href=https://github.com/systemjs/systemjs>systemjs</a>。</p> <blockquote> <p>动态加载最初也在ES6<a href=https://whatwg.github.io/loader/#system-loader-instance>草案</a>中，目前仍在制定中，未来可期。</p> </blockquote> <h3><a name=commonjs class=anchor href=#commonjs><span class=header-link></span></a>CommonJS</h3><p><a href=https://github.com/boijs/boi-example/tree/master/commonjs>源码</a></p> <p>boi的编译内核是webpack，webpack原生支持CommonJS和AMD，相对来说对CommonJS的支持度更好一些。主要表现在两方面：</p> <ol> <li>webpack runtime集成CommonJS runtime；</li> <li>使用CommonJS实现按需加载时可以定义懒加载模块的name。</li> </ol> <p>比如有以下代码：</p> <pre><code>import &#39;../styles/main.a.scss&#39;;\nimport a from &#39;./part/part.a.js&#39;;\nimport b from &#39;./part/part.b.js&#39;;\n\nwindow.onload = function() {\n    console.log(&#39;main chunk a is loaded&#39;);\n    a();\n    document.body.onclick = function() {\n        console.log(&#39;load on command&#39;);\n        // 第三个参数是chunk name，决定编译打包的文件名称\n        require.ensure([], (require) =&gt; {\n            let c = require(&#39;./part/part.c&#39;);\n            c.fn();\n        },&#39;asyncC&#39;);\n    }\n};\n</code></pre><p>使用<code>require.ensure</code>实现动态加载，在onload之后点击body任意地方可以触发<code>part.c.js</code>的下载和执行。</p> <p><code>require.ensure</code>第三个参数是动态加载模块的文件名。</p> <h3><a name=amd class=anchor href=#amd><span class=header-link></span></a>AMD</h3><p><a href=https://github.com/boijs/boi-example/tree/master/amd>源码</a></p> <p>AMD本身是对CommonJS的一种实现，它提供了浏览器的模块化runtime。以require.js为例，boi实现AMD的的步骤如下：</p> <ol> <li>在html文档中引入<code>require.js</code>并制定<code>data-main</code>：<pre><code> &lt;script src=&quot;/libs/require.js&quot; charset=&quot;utf-8&quot; data-main=&quot;main.a.js&quot;&gt;&lt;/script&gt;\n</code></pre></li> <li><p><code>main.a.js</code>代码如下：</p> <pre><code> import &#39;../styles/main.a.scss&#39;;\n\n // ADM sample\n require([&#39;./part/part.a.js&#39;, &#39;./part/part.b.js&#39;], function(a, b) {\n     console.log(&#39;main chunk a is loaded&#39;);\n     a();\n     b();\n     document.body.onclick = function() {\n         require([&#39;./part/part.c.js&#39;], function(c) {\n             c();\n         });\n     }\n });\n</code></pre><p> 同样是点击body触发<code>part.c.js</code>的加载和执行，<code>require</code>方案没有第三个参数，无法定义动态加载模块的文件名，所以最终编译生成的动态模块文件名中唯一有语义的就是模块的id:</p> <pre><code> 1.36a23b99.js    1.49 kB       1  [emitted]\n</code></pre></li> </ol>"},function(e,exports){e.exports="<h3><a name=shi-yong-boi-cha-jian class=anchor href=#shi-yong-boi-cha-jian><span class=header-link></span></a>使用boi插件</h3><p><code>boi.use</code>API提供使用boi自身插件的功能，语法如下：</p> <pre><code>boi.use(&#39;&lt;name&gt;&#39;,options);\n</code></pre><p>其中<code>name</code>是具体boi插件的名称，<code>options</code>是针对此插件的配置项。</p> <p><strong>注意</strong>：<code>boi.use</code>语句必须置于<code>boi-conf.js</code>的顶部，否则会出错。</p> <p>下面列举几个简单的例子。</p> <h4><a name=vue class=anchor href=#vue><span class=header-link></span></a>vue</h4><p><a href=https://github.com/boijs/boi-example/tree/master/vue>源码</a></p> <p>编译vue项目时需要使用<a href=https://github.com/boijs/boi-plugin-loader-vue><code>boi-plugin-loader-vue</code></a>插件，此插件的作用是将vue组件编译输出单独的js和css文件。配置<code>boi-conf.js</code>如下：</p> <pre><code>boi.use(&#39;boi-plugin-loader-vue&#39;,{\n    style: {\n        useHash: false\n    }\n});\n</code></pre><p>上述代码中的配置项<code>style</code>的作用是编译输出的css文件不带有hash指纹。</p> <h4><a name=svg-sprite class=anchor href=#svg-sprite><span class=header-link></span></a>svg sprite</h4><p><a href=https://github.com/boijs/boi-example/tree/master/svg-sprite>源码</a></p> <p>插件<a href=https://github.com/boijs/boi-plugin-loader-svgsprite>boi-plugin-loader-svgsprite</a>的作用是将散列的svg文件编译为一个svg sprite文件。配置<code>boi-conf.js</code>如下：</p> <pre><code>boi.use(&#39;boi-plugin-loader-svgsprite&#39;,{\n    name: &#39;svg/svg-sprite.svg&#39;,\n    inject: false,\n    targets: [&#39;index.html&#39;]\n});\n</code></pre><p>配置字段分别的作用为：</p> <ul> <li><code>name</code>：编译输出的svg sprite文件名称；</li> <li><code>inject</code>：是否将编译生成的svg sprite文件的<strong>内容</strong>注入到html中。如果取值<code>false</code>，则将<code>targets</code>指定的html文件中sprite文件的url更新为编译后的真实url；</li> <li><code>targets</code>：待注入的html文件名。</li> </ul> <h4><a name=markdown class=anchor href=#markdown><span class=header-link></span></a>markdown</h4><p><a href=https://github.com/boijs/boi-example/tree/master/markdown>源码</a></p> <p>插件<a href=https://github.com/boijs/boi-plugin-loader-md>boi-plugin-loader-md</a>可以支持js中直接引入markdown文件，编译为html字符串以供后续处理。比如在vue中直接引入markdown如下：</p> <pre><code>data: function(){\n    return {\n        doc: require(&quot;../../docs/_install.md&quot;)\n    };\n}\n</code></pre><p>然后再<code>template</code>中将markdown文件内容注入文档：</p> <pre><code>&lt;template&gt;\n    {{doc}}\n&lt;/template&gt;\n</code></pre><p>使用<code>boi-plugin-loader-md</code>方法如下：</p> <pre><code>// 配置boi-conf.js\nboi.use(&#39;boi-plugin-loader-md&#39;);\n</code></pre><blockquote> <p>更多示例请参考<a href=https://github.com/boijs/boi-example>Github</a>。</p> </blockquote> <h3><a name=bian-xie-boi-cha-jian class=anchor href=#bian-xie-boi-cha-jian><span class=header-link></span></a>编写boi插件</h3><p>用户可以根据自身需求编写boi插件。目前版本(v1.x.x)只支持一种形式的插件：loader。</p> <p>loader类型的插件本质上是对webpack配置的桥接，boi自身的配置限制了一部分webpack的配置功能，一方面是为了具化的定制团队需求，另一方面也是为了简化API，让不熟悉webpack的用户更容易上手。</p> <p>编写loader类型插件的方法很简单，只有两点：</p> <ol> <li>书写配置项；</li> <li>实例化<code>boi.PluginClass.loader</code>。</li> </ol> <p>举个例子。首先书写如下的配置项：</p> <pre><code>let config = {\n    module: {\n        preloader: null,\n        postloader: null,\n        loaders: [{\n            test: /\\.vue$/,\n            loader: &#39;vue&#39;\n        }].concat(styleLoaders({\n            extract: true\n        }))\n    },\n    noParse: null,\n    plugins: [stylePlugin],\n    // 额外附件内容，一般提供给loaders使用\n    extra: {\n        vue: {\n            loaders: cssLoaders({\n                extract: true\n            })\n        }\n    },\n    // 插件依赖的第三方module\n    // 此配置项是为了解决低版本npm树形安装node_modules引起的module寻址问题\n    // 如果你确定使用npm 3.0.0及以上版本，可以不配置此项\n    dependencies: [\n        &#39;vue-loader&#39;,\n        &#39;vue-style-loader&#39;,\n        &#39;vue-html-loader&#39;,\n        &#39;extract-text-webpack-plugin&#39;\n    ]\n};\n</code></pre><p>大部分配置项是对webpack直接进行配置，有两个字段需要注意：</p> <ol> <li><code>extra</code>字段是一些额外内容，一般是某些loader不能通过简单的query配置，需要额外生成一个对象。如上述代码中<code>extra</code>字段中的vue对象，便是提供给<code>loaders</code>使用；</li> <li><code>dependencies</code>字段是为了解决低版本npm不能平行安装modules导致的模块寻址错误。<code>dependencies</code>数组是此插件依赖的一些模块。如果你确定使用了较新版本的npm，可以不配置此项。</li> </ol> <p>配置项书写完毕之后，执行以下代码：</p> <pre><code>let ClassLoader = boi.PluginClass.loader;\nnew ClassLoader(&#39;extend&#39;, config);\n</code></pre><blockquote> <p><code>extend</code>是插件的执行类型，目前版本(v1.x.x)暂时不用理会，统一写成<code>extend</code>即可。</p> </blockquote> <p>插件编写完毕之后，发布到npm之后便可以在项目中使用了。</p> <h3><a name=shi-yong-webpack-cha-jian class=anchor href=#shi-yong-webpack-cha-jian><span class=header-link></span></a>使用webpack插件</h3><p>boi目前版本(v1.x.x)的插件生态仍然很粗糙，不能百分百满足各种项目的不同需求。<a href=/#!/docs/config/gao-ji-pei-zhi>高级配置API</a>也是为了解决这种问题，用户可以通过<a href=/#!/docs/config/gao-ji-pei-zhi>高级配置API</a>直接使用webpack插件，使用方法与常规webpack项目相同。比如：</p> <pre><code>let ExtractSVGPlugin = require(&#39;boi-svg-sprite-loader/lib/extract-svg-plugin&#39;);\n\nboi.spec(&#39;image&#39;,{\n    webpackConfig: {\n        loaders: [{\n            test: /\\.svg$/,\n            loader: ExtractSVGPlugin.extract(&#39;boi-svg-sprite-loader?extract=true&#39;)\n        }],\n        plugins: [new ExtractSVGPlugin(&#39;svg-sprite.[contenthash].svg&#39;)]\n    }\n});\n</code></pre>"},function(e,exports){e.exports=" <index-header :isfix=false mode=mini></index-header> <div class=docs> <div class=docs_index> <a v-link=\"{name: 'index'}\"> <logo-canvas v-bind:size=size_logo_canvas mode=mini></logo-canvas> </a> <doc-index v-bind:index=index v-bind:active=$route.params.anchor></doc-index> </div> <div class=docs_article> <doc-article v-bind:content=docs[$route.params.anchor]?docs[$route.params.anchor].content:docs.start.content></doc-article> </div> </div> "}]));